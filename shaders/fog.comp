#version 450

layout(binding = 0, rgba8) uniform image2D colorImage;   // The off-screen color image (input/output)
layout(binding = 1) uniform sampler2D depthImage;        // Depth buffer image (input)

layout(binding = 2) uniform FogUBO {
    vec3 fogColor;
    float fogStart;
    float fogEnd;
} ubo;


layout(local_size_x = 16, local_size_y = 16) in;         // Define workgroup size

void main() {
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    
    // Get the current color from the color image
    vec4 sceneColor = imageLoad(colorImage, pixelCoords);
    
    // Get the depth for the current pixel
    float depth = texture(depthImage, vec2(pixelCoords) / vec2(imageSize(colorImage))).r;

    // Convert depth to world space distance (optional, depends on your depth setup)
    float distance = depth * maxDistance;  // Replace with actual max distance based on your camera setup

    // Calculate fog factor
    float fogFactor = clamp((ubo.fogEnd - distance) / (ubo.fogEnd - ubo.fogStart), 0.0, 1.0);

    // Blend the scene color with the fog color
    vec3 finalColor = mix(ubo.fogColor, sceneColor.rgb, fogFactor);

    // Write the final color to the image
    imageStore(colorImage, pixelCoords, vec4(finalColor, sceneColor.a));
}